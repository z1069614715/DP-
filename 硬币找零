import java.util.Scanner;

public class CoinChange {
    /*
     * 动态规划模型：硬币找零
     * 测试数据：
     * 10 3
     * 1 3 5
     * */
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int moneySum = input.nextInt();//找零金额
        int coinKind = input.nextInt();//硬币种类数量
        int kindOfCoin[] = new int[coinKind + 1];//硬币种类数组
        for (int i = 0; i < coinKind; i++) {
            kindOfCoin[i + 1] = input.nextInt();
        }

        int dp[][] = new int[coinKind + 1][moneySum + 1];//数组dp行是硬币种类，列是找零金额

        for (int i = 1; i <= coinKind; i++) {
            for (int j = 1; j <= moneySum; j++) {
                int coinCount = j / kindOfCoin[i];//获取当前金额j可以用多少个kindOfCoin[i]来表示，例如j = 5,kindOfCoin[i] = 3,则coinCount = 1.
                dp[i][j] = dp[i - 1][j - coinCount * kindOfCoin[i]] + coinCount;//dp[i][j]等于当前用kindOfCoin[i]可以表示的最大值加上用dp[i - 1]中的剩余金额表示
            }
        }

        for (int i = 1; i <= coinKind; i++) {
            for (int j = 1; j <= moneySum; j++) {
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
//        输出结果为dp[coinKind][moneySum]
    }
}

    Serling公司购买长钢条，将其切割为短钢条出售。切割工序本身没有成本支出。公司管理层希望知道最佳的切割方案。
    假定我们知道Serling公司出售一段长为i英寸的钢条的价格为pi(i=1,2,…，单位为美元)。钢条的长度均为整英寸。

    | 长度i | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

    | - | - | - | - | - | - | - | - | - | - |

    价格pi | 1 | 5 | 8 | 16 | 10 | 17 | 17 | 20 | 24 | 30 |

    钢条切割问题是这样的：给定一段长度为n英寸的钢条和一个价格表pi(i=1,2,…n)，求切割钢条方案，使得销售收益rn最大。
    注意，如果长度为n英寸的钢条的价格pn足够大，最优解可能就是完全不需要切割
    
 
public class SteelCutting {
    public static int cut(int p[],int n){
        if (n == 0) return 0;

        int count = Integer.MIN_VALUE;

        for (int i = 1; i <= n; i++) {
            count = Math.max(count,cut(p,n - i) + p[i]);
        }

        return count;
    }
    public static void main(String[] args) {
        int steelLen = 10;
        int prize[] = {0,1,5,8,9,10,17,17,20,24,30};

        int dp[][] = new int[11][steelLen + 1];

        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length; j++) {
                if (j >= i){
                    int count = j / i;
                    dp[i][j] = Math.max(dp[i - 1][j - count * i] + prize[i] * count,dp[i - 1][j]);
                }else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        System.out.println(cut(prize,steelLen));

        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[i].length ; j++) {
                System.out.print(dp[i][j] + " ");
            }
            System.out.println();
        }
    }
}
